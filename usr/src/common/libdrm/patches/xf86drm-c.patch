--- libdrm-2.4.99/xf86drm.c.orig	2019-07-02 20:36:50.000000000 +0000
+++ libdrm-2.4.99/xf86drm.c	2019-08-16 16:28:04.955713051 +0000
@@ -97,6 +97,11 @@
 #endif
 #endif /* __OpenBSD__ */
 
+#if defined(__sun)
+/* Device majors are dynamic. */
+#define DRM_MAJOR	(_sun_drm_get_major())
+#endif /* __sun */
+
 #ifndef DRM_MAJOR
 #define DRM_MAJOR 226 /* Linux */
 #endif
@@ -364,17 +369,27 @@
     if (stat(DRM_DIR_NAME, &st)) {
         if (!isroot)
             return DRM_ERR_NOT_ROOT;
+#if defined(__sun)
+	/* Let the system do this. */
+	return DRM_ERR_NO_DEVICE;
+#else
         mkdir(DRM_DIR_NAME, DRM_DEV_DIRMODE);
         chown_check_return(DRM_DIR_NAME, 0, 0); /* root:root */
         chmod(DRM_DIR_NAME, DRM_DEV_DIRMODE);
+#endif
     }
 
     /* Check if the device node exists and create it if necessary. */
     if (stat(buf, &st)) {
         if (!isroot)
             return DRM_ERR_NOT_ROOT;
+#if defined(__sun)
+	/* Let the system do this. */
+	return DRM_ERR_NO_DEVICE;
+#else
         remove(buf);
         mknod(buf, S_IFCHR | devmode, dev);
+#endif
     }
 
     if (drm_server_info && drm_server_info->get_perms) {
@@ -420,12 +435,17 @@
     if (st.st_rdev != dev) {
         if (!isroot)
             return DRM_ERR_NOT_ROOT;
+#if defined(__sun)
+	/* Let the system do this. */
+	return DRM_ERR_NO_DEVICE;
+#else
         remove(buf);
         mknod(buf, S_IFCHR | devmode, dev);
         if (drm_server_info && drm_server_info->get_perms) {
             chown_check_return(buf, user, group);
             chmod(buf, devmode);
         }
+#endif
     }
     fd = open(buf, O_RDWR | O_CLOEXEC, 0);
     drmMsg("drmOpenDevice: open result is %d, (%s)\n",
@@ -547,6 +567,7 @@
     }
 }
 
+#ifndef __sun /* Avoid "static unused" warning */
 static const char *drmGetMinorName(int type)
 {
     switch (type) {
@@ -560,6 +581,7 @@
         return NULL;
     }
 }
+#endif /* __sun */
 
 /**
  * Open the device by bus ID.
@@ -1123,7 +1145,7 @@
     drm_map_t map;
 
     memclear(map);
-    map.handle = (void *)(uintptr_t)handle;
+    map.handle = (drm_handle_t)(uintptr_t)handle;
 
     if(drmIoctl(fd, DRM_IOCTL_RM_MAP, &map))
         return -errno;
@@ -2776,6 +2798,15 @@
     fstat(fd, &sbuf);
     d = sbuf.st_rdev;
 
+#if defined(__sun)
+    /*
+     * Get rid of clone-open bits in the minor number.
+     * See: the drm driver drm_sun_open()
+     * Don't have DRM_CLONEID_NBITS here.
+     */
+    d &= ~0x3fe00;
+#endif
+
     for (i = 0; i < DRM_MAX_MINOR; i++) {
         snprintf(name, sizeof name, DRM_DEV_NAME, DRM_DIR_NAME, i);
         if (stat(name, &sbuf) == 0 && sbuf.st_rdev == d)
@@ -2901,7 +2932,11 @@
     return NULL;
 #else
     struct stat sbuf;
+#if defined(__sun)
+    char *path = NULL;
+#else
     char buf[PATH_MAX + 1];
+#endif
     const char *dev_name;
     unsigned int maj, min;
     int n, base;
@@ -2915,6 +2950,13 @@
     if (!drmNodeIsDRM(maj, min) || !S_ISCHR(sbuf.st_mode))
         return NULL;
 
+#if defined(__sun)
+    /* Walk devices tree looking for this minor */
+    if (_sun_drm_find_device(min, &path) == 0)
+        return (path);
+
+    return NULL;
+#else
     switch (type) {
     case DRM_NODE_PRIMARY:
         dev_name = DRM_DEV_NAME;
@@ -2939,6 +2981,7 @@
 
     return strdup(buf);
 #endif
+#endif
 }
 
 drm_public char *drmGetPrimaryDeviceNameFromFd(int fd)
@@ -3034,6 +3077,20 @@
     return -EINVAL;
 #elif defined(__OpenBSD__) || defined(__DragonFly__)
     return DRM_BUS_PCI;
+#elif defined(__sun)	/* illumos, OSol */
+    char *path = NULL;
+    int ret;
+
+    if (maj != DRM_MAJOR)
+	    return -EINVAL;
+
+    ret = _sun_drm_find_device(min, &path);
+    if (ret != 0)
+	    return (ret);
+
+    ret = _sun_drm_get_subsystem(path);
+    free(path);
+    return (ret);
 #else
 #warning "Missing implementation of drmParseSubsystemType"
     return -EINVAL;
@@ -3105,6 +3162,21 @@
     info->func = pinfo.func;
 
     return 0;
+#elif defined(__sun)	/* illumos, OSol */
+    char *path = NULL;
+    int err;
+
+    if (maj != DRM_MAJOR)
+	    return -EINVAL;
+
+    err = _sun_drm_find_device(min, &path);
+    if (err != 0)
+	    return (err);
+
+    err = _sun_drm_get_pci_bus_info(path, info);
+    free(path);
+
+    return err;
 #else
 #warning "Missing implementation of drmParsePciBusInfo"
     return -EINVAL;
@@ -3272,6 +3344,21 @@
     device->subdevice_id = pinfo.subdevice_id;
 
     return 0;
+#elif defined(__sun)	/* illumos, OSol */
+    char *path = NULL;
+    int err;
+
+    if (maj != DRM_MAJOR)
+	    return -EINVAL;
+
+    err = _sun_drm_find_device(min, &path);
+    if (err != 0)
+	    return (err);
+
+    err = _sun_drm_get_pci_dev_info(path, device);
+    free(path);
+
+    return err;
 #else
 #warning "Missing implementation of drmParsePciDeviceInfo"
     return -EINVAL;
