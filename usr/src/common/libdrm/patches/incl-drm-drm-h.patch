--- libdrm-2.4.99/include/drm/drm.h.orig	2019-07-02 20:36:50.000000000 +0000
+++ libdrm-2.4.99/include/drm/drm.h	2019-08-16 15:33:13.290665546 +0000
@@ -42,7 +42,7 @@
 #include <asm/ioctl.h>
 typedef unsigned int drm_handle_t;
 
-#else /* One of the BSDs */
+#else /* One of the BSDs or illumos */
 
 #include <stdint.h>
 #include <sys/ioccom.h>
@@ -56,14 +56,40 @@
 typedef int64_t  __s64;
 typedef uint64_t __u64;
 typedef size_t   __kernel_size_t;
+#if defined(__SOLARIS__) || defined(__sun)
+#include <sys/types32.h>
+typedef unsigned long long drm_handle_t;
+#else	/* __SOLARIS__ or __sun */
 typedef unsigned long drm_handle_t;
+#endif	/* __SOLARIS__ or __sun */
 
-#endif
+#endif /* One of the BSDs or illumos */
 
 #if defined(__cplusplus)
 extern "C" {
 #endif
 
+/* Solaris-specific. */
+#if defined(__SOLARIS__) || defined(__sun)
+
+#define        _IOC_NRBITS     8
+#define        _IOC_TYPEBITS   8
+#define        _IOC_SIZEBITS   13
+#define        _IOC_DIRBITS    3
+
+#define        _IOC_NRSHIFT    0
+#define        _IOC_TYPESHIFT  (_IOC_NRSHIFT + _IOC_NRBITS)
+#define        _IOC_SIZESHIFT  (_IOC_TYPESHIFT + _IOC_TYPEBITS)
+#define        _IOC_DIRSHIFT   (_IOC_SIZESHIFT + _IOC_SIZEBITS)
+
+#define        _IOC(dir, type, nr, size) \
+       (((dir) /* already shifted */) | \
+       ((type) << _IOC_TYPESHIFT) | \
+       ((nr)   << _IOC_NRSHIFT) | \
+       ((size) << _IOC_SIZESHIFT))
+
+#endif /* __Solaris__ or __sun */
+
 #define DRM_NAME	"drm"	  /**< Name in kernel, /dev, and /proc */
 #define DRM_MIN_ORDER	5	  /**< At least 2^5 bytes = 32 bytes */
 #define DRM_MAX_ORDER	22	  /**< Up to 2^22 bytes = 4MB */
@@ -186,7 +212,8 @@
 	_DRM_SHM = 2,		  /**< shared, cached */
 	_DRM_AGP = 3,		  /**< AGP/GART */
 	_DRM_SCATTER_GATHER = 4,  /**< Scatter/gather memory for PCI DMA */
-	_DRM_CONSISTENT = 5	  /**< Consistent memory for PCI DMA */
+	_DRM_CONSISTENT = 5,	  /**< Consistent memory for PCI DMA */
+	_DRM_GEM = 6		  /**< GEM object (XXX: Not libdrm?) */
 };
 
 /**
@@ -215,12 +242,13 @@
  * \sa drmAddMap().
  */
 struct drm_map {
-	unsigned long offset;	 /**< Requested physical address (0 for SAREA)*/
+	unsigned long long offset;	 /**< Requested physical address (0 for SAREA)*/
+	unsigned long long handle;	 
+				 /**< User-space: "Handle" to pass to mmap() */
+				 /**< Kernel-space: kernel-virtual address */
 	unsigned long size;	 /**< Requested physical size (bytes) */
 	enum drm_map_type type;	 /**< Type of memory to map */
 	enum drm_map_flags flags;	 /**< Flags */
-	void *handle;		 /**< User-space: "Handle" to pass to mmap() */
-				 /**< Kernel-space: kernel-virtual address */
 	int mtrr;		 /**< MTRR slot used */
 	/*   Private data */
 };
@@ -327,18 +355,22 @@
  *
  * \sa drmAddBufs().
  */
+
+typedef enum {
+       _DRM_PAGE_ALIGN = 0x01, /**< Align on page boundaries for DMA */
+       _DRM_AGP_BUFFER = 0x02, /**< Buffer is in AGP space */
+       _DRM_SG_BUFFER  = 0x04, /**< Scatter/gather memory buffer */
+       _DRM_FB_BUFFER  = 0x08, /**< Buffer is in frame buffer */
+       _DRM_PCI_BUFFER_RO = 0x10 /**< Map PCI DMA buffer read-only */
+} drm_buf_flag;
+
+
 struct drm_buf_desc {
 	int count;		 /**< Number of buffers of this size */
 	int size;		 /**< Size in bytes */
 	int low_mark;		 /**< Low water mark */
 	int high_mark;		 /**< High water mark */
-	enum {
-		_DRM_PAGE_ALIGN = 0x01,	/**< Align on page boundaries for DMA */
-		_DRM_AGP_BUFFER = 0x02,	/**< Buffer is in AGP space */
-		_DRM_SG_BUFFER = 0x04,	/**< Scatter/gather memory buffer */
-		_DRM_FB_BUFFER = 0x08,	/**< Buffer is in frame buffer */
-		_DRM_PCI_BUFFER_RO = 0x10 /**< Map PCI DMA buffer read-only */
-	} flags;
+	drm_buf_flag flags;
 	unsigned long agp_start; /**<
 				  * Start address of where the AGP buffers are
 				  * in the AGP aperture
@@ -384,6 +416,7 @@
 	void *virtual;		/**< Mmap'd area in user-virtual */
 #endif
 	struct drm_buf_pub *list;	/**< Buffer information */
+	int fd;
 };
 
 /**
@@ -495,8 +528,13 @@
 struct drm_wait_vblank_reply {
 	enum drm_vblank_seq_type type;
 	unsigned int sequence;
+#if defined(__sun)
+        time_t tval_sec;
+        suseconds_t tval_usec;
+#else
 	long tval_sec;
 	long tval_usec;
+#endif
 };
 
 /**
@@ -813,10 +851,10 @@
 #endif
 
 #define DRM_IOCTL_BASE			'd'
-#define DRM_IO(nr)			_IO(DRM_IOCTL_BASE,nr)
-#define DRM_IOR(nr,type)		_IOR(DRM_IOCTL_BASE,nr,type)
-#define DRM_IOW(nr,type)		_IOW(DRM_IOCTL_BASE,nr,type)
-#define DRM_IOWR(nr,type)		_IOWR(DRM_IOCTL_BASE,nr,type)
+#define DRM_IO(nr)			_IO(DRM_IOCTL_BASE,(nr))
+#define DRM_IOR(nr,type)		_IOR(DRM_IOCTL_BASE,(nr),type)
+#define DRM_IOW(nr,type)		_IOW(DRM_IOCTL_BASE,(nr),type)
+#define DRM_IOWR(nr,type)		_IOWR(DRM_IOCTL_BASE,(nr),type)
 
 #define DRM_IOCTL_VERSION		DRM_IOWR(0x00, struct drm_version)
 #define DRM_IOCTL_GET_UNIQUE		DRM_IOWR(0x01, struct drm_unique)
@@ -976,8 +1014,13 @@
 struct drm_event_vblank {
 	struct drm_event base;
 	__u64 user_data;
+#if defined(__sun)
+        time_t tv_sec;
+        suseconds_t tv_usec;
+#else
 	__u32 tv_sec;
 	__u32 tv_usec;
+#endif
 	__u32 sequence;
 	__u32 crtc_id; /* 0 on older kernels that do not support this */
 };
